name: Build and Deploy to Minikube

on:
  push:
    branches:
      - main  # Trigger deployment on pushes to the `main` branch

jobs:
  build-deploy:
    runs-on: self-hosted  # Use a self-hosted runner that has Minikube and Docker set up

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker to use Minikube's Docker daemon
      - name: Set up Docker environment for Minikube
        run: |
          echo "Configuring Docker to use Minikube's daemon..."
          eval $(minikube docker-env)

      # Step 3: Build Docker images for frontend, backend, and admin
      - name: Build Docker images
        run: |
          docker build -t your-dockerhub-username/frontend:latest -f ./Dockerfile.frontend .
          docker build -t your-dockerhub-username/backend:latest -f ./Dockerfile.backend .
          docker build -t your-dockerhub-username/admin:latest -f ./Dockerfile.admin .

      # Step 4: Log in to Docker Hub (secrets for username and password are stored in GitHub Secrets)
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 5: Push Docker images to Docker Hub
      - name: Push Docker images to Docker Hub
        run: |
          docker push your-dockerhub-username/frontend:latest
          docker push your-dockerhub-username/backend:latest
          docker push your-dockerhub-username/admin:latest

      # Step 6: Deploy the updated images to Minikube using kubectl
      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8/deployment.yaml
          kubectl apply -f k8/service.yaml

      # Step 7: Verify if the deployment was successful
      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl get deployments

